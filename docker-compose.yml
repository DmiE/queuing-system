version: '3.5'

services:
  mariadb:
    build:
      context: ./mariaDB
      dockerfile: Dockerfile
    container_name: mariaDB
    volumes:
      - container-volume:/var/lib/mysql
      - ./mariaDB/dump.sql:/docker-entrypoint-initdb.d/dump.sql
    restart: always
    hostname: mariaDB
    ports:
      - 3306:3306
    environment:
      - MARIADB_ROOT_PASSWORD=master_root_password
      - MARIADB_USER=admin
      - MARIADB_PASSWORD=admin
      - MARIADB_DATABASE=app
      - ALLOW_EMPTY_PASSWORD=yes

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    hostname: phpmyadmin
    depends_on:
      - mariadb
    environment:
      - PMA_ARBITRARY=1
    restart: always
    ports:
      - 5050:80

  mongo:
    build:
      context: ./mongoDB
      dockerfile: Dockerfile
    container_name: mongodb
    restart: always
    hostname: mongodb
    ports:
      - 27017:27017
      - 28017:28017
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
      MONGO_INITDB_DATABASE: admin

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin
      ME_CONFIG_MONGODB_SERVER: mongodb

  frontend:
    container_name: mgr-frontend
    build:
      context: ./frontend/mgr-frontend
      dockerfile: Dockerfile
    volumes:
      - './frontend/mgr-frontend:/app'
      - '/app/node_modules'
    ports:
      - '3001:3000'
    environment:
      - NODE_ENV=development

  qmanager-authentication-service:
    container_name: qmanager-authentication-service
    stdin_open: true
    hostname: auth-service
    depends_on:
      - mariadb
    tty: true
    build:
      context: ./qmanager-authentication-service
      dockerfile: Dockerfile
    ports:
      - 5000:5000

  prometheus:
    image: 'prom/prometheus:v2.1.0'
    container_name: prometheus
    ports:
      - '9090:9090'
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - './prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro'
    depends_on:
      - cadvisor

  cadvisor:
    image: google/cadvisor
    container_name: cadvisor
    privileged: true
    ports:
      - '8080:8080'
    volumes:
      - '/:/rootfs:ro'
      - '/var/run:/var/run:rw'
      - '/sys:/sys:ro'
      - '/var/lib/docker/:/var/lib/docker:ro'

  node-exporter:
    image: prom/node-exporter
    volumes:
     - '/proc:/host/proc:ro'
     - '/sys:/host/sys:ro'
     - '/:/rootfs:ro'
    command:
     - '--path.procfs=/host/proc'
     - '--path.sysfs=/host/sys'
     - '--collector.filesystem.ignored-mount-points'
     - ^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)
    ports:
     - '9100:9100'
    restart: always

  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    ports:
      - '3000:3000'
    volumes:
      - 'grafana_data:/var/lib/grafana'
      - './grafana/provisioning/:/etc/grafana/provisioning/'
    env_file:
      - ./grafana/config.monitoring
    restart: always

volumes:
  container-volume:
  grafana_data: {}
  prometheus_data: {}

